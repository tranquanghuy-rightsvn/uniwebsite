!(function (t, i, n, o) {
  var s,
    a,
    e,
    h = "pinterest_grid",
    c = {
      padding_x: 10,
      padding_y: 10,
      no_columns: 3,
      margin_bottom: 50,
      single_column_breakpoint: 700,
    };
  function l(i, n) {
    (this.element = i),
      (this.options = t.extend({}, c, n)),
      (this._defaults = c),
      (this._name = h),
      this.init();
  }
  (l.prototype.init = function () {
    this.make_layout_change(this);
  }),
    (l.prototype.calculate = function (n) {
      var o = this,
        h = 0,
        c = t(this.element);
      c.width();
      (a = t(this.element).children()),
        (e =
          !0 === n
            ? c.width() - o.options.padding_x
            : (c.width() - o.options.padding_x * o.options.no_columns) /
              o.options.no_columns),
        a.each(function () {
          t(this).css("width", e);
        }),
        (s = o.options.no_columns),
        a.each(function (i) {
          var a,
            c = 0,
            l = 0,
            p = t(this),
            d = p.prevAll();
          a = !1 === n ? i % s : 0;
          for (var u = 0; u < s; u++) p.removeClass("c" + u);
          i % s == 0 && h++,
            p.addClass("c" + a),
            p.addClass("r" + h),
            d.each(function (i) {
              t(this).hasClass("c" + a) &&
                (l += t(this).outerHeight() + o.options.padding_y);
            }),
            (c = !0 === n ? 0 : (i % s) * (e + o.options.padding_x)),
            p.css({ left: c, top: l });
        }),
        this.tallest(c),
        t(i).resize();
    }),
    (l.prototype.tallest = function (i) {
      for (var n, o = [], a = 0; a < s; a++) {
        var e = 0;
        i.find(".c" + a).each(function () {
          e += t(this).outerHeight();
        }),
          (o[a] = e);
      }
      (n = Math.max.apply(Math, o)),
        i.css(
          "height",
          n + (this.options.padding_y + this.options.margin_bottom)
        );
    }),
    (l.prototype.make_layout_change = function (n) {
      t(i).width() < n.options.single_column_breakpoint
        ? n.calculate(!0)
        : n.calculate(!1);
    }),
    (t.fn[h] = function (i) {
      return this.each(function () {
        t.data(this, "plugin_" + h) ||
          t.data(this, "plugin_" + h, new l(this, i));
      });
    });
})(jQuery, window, document);
